import me.modmuss50.mpp.ReleaseType

plugins {
	id 'multiloader-loader'
	id 'fabric-loom'
	id 'me.modmuss50.mod-publish-plugin'
}
dependencies {
	minecraft "com.mojang:minecraft:${minecraft_version}"
	mappings loom.layered {
		officialMojangMappings()
		parchment("org.parchmentmc.data:parchment-${parchment_minecraft}:${parchment_version}@zip")
	}
	modImplementation "net.fabricmc:fabric-loader:${fabric_loader_version}"
	modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_version}"
}

loom {
	def aw = project(':common').file("src/main/resources/${mod_id}.accesswidener")
	if (aw.exists()) {
		accessWidenerPath.set(aw)
	}
	mixin {
		defaultRefmapName.set("${mod_id}.refmap.json")
	}
	runs {
		client {
			client()
			setConfigName('Fabric Client')
			ideConfigGenerated(true)
			runDir('runs/client')
		}
		server {
			server()
			setConfigName('Fabric Server')
			ideConfigGenerated(true)
			runDir('runs/server')
		}
	}
}

publishMods {
	file = tasks.remapJar.archiveFile
	changelog = rootProject.file("CHANGELOG.md").text
	version = project.version
	type = ReleaseType.of(release_type)
	displayName = "${mod_name} ${version} for ${minecraft_version} Fabric"
	modLoaders.add("fabric")

	curseforge {
		projectId = curseforge_id
		accessToken = providers.environmentVariable("CURSEFORGE_TOKEN")
		minecraftVersions.add(minecraft_version)
	}

	modrinth {
		projectId = modrinth_id
		accessToken = providers.environmentVariable("MODRINTH_TOKEN")
		minecraftVersions.add(minecraft_version)
	}
}
