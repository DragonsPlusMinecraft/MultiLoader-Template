plugins {
	id 'multiloader-common'
}

configurations {
	commonJava {
		canBeResolved = true
	}
	commonResources {
		canBeResolved = true
	}
	commonGeneratedResources {
		canBeResolved = true
	}
}

dependencies {
	compileOnly(project(':common')) {
		capabilities {
			requireCapability "$group:$mod_id"
		}
	}
	commonJava project(path: ':common', configuration: 'commonJava')
	commonResources project(path: ':common', configuration: 'commonResources')
	commonGeneratedResources project(path: ':common', configuration: 'commonGeneratedResources')
	compileOnly 'com.google.auto.service:auto-service:1.0.1'
	annotationProcessor 'com.google.auto.service:auto-service:1.0.1'
}

tasks.named('compileJava', JavaCompile) {
	dependsOn(configurations.commonJava)
	source(configurations.commonJava)
}

processResources {
	dependsOn(configurations.commonResources)
	from(configurations.commonResources)
	dependsOn(configurations.commonGeneratedResources)
	from(configurations.commonGeneratedResources)
}

tasks.named('javadoc', Javadoc).configure {
	dependsOn(configurations.commonJava)
	source(configurations.commonJava)
}

tasks.named('sourcesJar', Jar) {
	dependsOn(configurations.commonJava)
	from(configurations.commonJava)
	dependsOn(configurations.commonResources)
	from(configurations.commonResources)
	dependsOn(configurations.commonGeneratedResources)
	from(configurations.commonGeneratedResources)
}
